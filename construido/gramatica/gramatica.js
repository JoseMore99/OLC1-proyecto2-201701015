/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,28],$V2=[1,29],$V3=[1,21],$V4=[1,37],$V5=[1,22],$V6=[1,26],$V7=[1,25],$V8=[1,24],$V9=[1,20],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,17],$Vg=[1,18],$Vh=[1,35],$Vi=[1,36],$Vj=[1,39],$Vk=[1,40],$Vl=[1,41],$Vm=[1,42],$Vn=[1,43],$Vo=[5,21,22,23,25,26,30,32,33,34,36,40,42,43,50,51,52,53,54,55,56,58,71,73,74,75,76,77],$Vp=[57,58,59,60,61,62,63,64,65,66,67,68,69,70],$Vq=[2,66],$Vr=[2,76],$Vs=[2,79],$Vt=[1,52],$Vu=[1,56],$Vv=[1,57],$Vw=[1,58],$Vx=[1,59],$Vy=[1,60],$Vz=[1,61],$VA=[1,62],$VB=[1,63],$VC=[1,64],$VD=[1,65],$VE=[1,66],$VF=[1,67],$VG=[1,68],$VH=[1,69],$VI=[1,79],$VJ=[28,43],$VK=[9,27,41,45,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VL=[9,27],$VM=[1,116],$VN=[9,27,41,45,69,70],$VO=[2,37],$VP=[27,45],$VQ=[9,27,41,45,57,58,63,64,65,66,67,68,69,70],$VR=[9,27,41,45,57,58,59,60,62,63,64,65,66,67,68,69,70],$VS=[9,27,41,45,63,64,69,70],$VT=[9,27,41,45,63,64,65,66,67,68,69,70],$VU=[30,40,42],$VV=[1,156],$VW=[1,155];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INI":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"IMPRIMIR":7,"DECLARAR":8,"puntycom":9,"INSTIF":10,"INSTWHILE":11,"INCDEC":12,"INSTSWITCH":13,"INSTFOR":14,"INSTDOWHILE":15,"INSTFUNC":16,"INSTBREAK":17,"INSTCONTINUE":18,"INSTRETURN":19,"LLAMARFUNC":20,"resbreak":21,"rescontinue":22,"resreturn":23,"EXPRESION":24,"resif":25,"pariz":26,"parder":27,"llaveiz":28,"BLOQUEINST":29,"llaveder":30,"INSTELSE":31,"reswhile":32,"resdo":33,"resfor":34,"reselse":35,"reswitch":36,"LISTACASE":37,"DEFAULT":38,"INSTCASE":39,"rescase":40,"dospunt":41,"resdefaul":42,"id":43,"LISTAP":44,"coma":45,"PARAMETROS":46,"resvoid":47,"TIPODATO":48,"igual":49,"resint":50,"resdouble":51,"resstring":52,"resbool":53,"reschar":54,"print":55,"println":56,"mas":57,"menos":58,"divid":59,"por":60,"pot":61,"mod":62,"igualigual":63,"noigual":64,"mayorigual":65,"mayor":66,"menorigual":67,"menor":68,"and":69,"or":70,"not":71,"NATIVO":72,"numero":73,"decimal":74,"cadena":75,"bool":76,"caracter":77,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"puntycom",21:"resbreak",22:"rescontinue",23:"resreturn",25:"resif",26:"pariz",27:"parder",28:"llaveiz",30:"llaveder",32:"reswhile",33:"resdo",34:"resfor",35:"reselse",36:"reswitch",40:"rescase",41:"dospunt",42:"resdefaul",43:"id",45:"coma",47:"resvoid",49:"igual",50:"resint",51:"resdouble",52:"resstring",53:"resbool",54:"reschar",55:"print",56:"println",57:"mas",58:"menos",59:"divid",60:"por",61:"pot",62:"mod",63:"igualigual",64:"noigual",65:"mayorigual",66:"mayor",67:"menorigual",68:"menor",69:"and",70:"or",71:"not",73:"numero",74:"decimal",75:"cadena",76:"bool",77:"caracter"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,1],[6,1],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[17,2],[18,2],[19,2],[19,3],[10,8],[11,7],[15,9],[14,11],[14,11],[31,4],[31,2],[31,0],[13,8],[13,7],[13,7],[37,2],[37,1],[39,4],[38,3],[20,4],[20,3],[44,3],[44,1],[16,9],[16,8],[16,9],[16,8],[46,4],[46,2],[8,4],[8,2],[8,3],[48,1],[48,1],[48,1],[48,1],[48,1],[7,5],[7,5],[29,1],[12,3],[12,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,1],[24,3],[24,1],[24,1],[72,1],[72,1],[72,1],[72,1],[72,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2: case 32:
if($$[$0]!=false)$$[$0-1].push($$[$0]);this.$=$$[$0-1];
break;
case 3: case 33:
this.$=($$[$0]!=false) ?[$$[$0]]:[];
break;
case 4: case 6: case 7: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 66:
this.$=$$[$0];
break;
case 5: case 8: case 16:
this.$=$$[$0-1];
break;
case 17:
this.$=new Break(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 18:
this.$=new Continue(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19:
this.$=new Return(null, _$[$0-1].first_line,_$[$0-1].first_column);
break;
case 20:
this.$=new Return($$[$0-1], _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21:
this.$=new If($$[$0-5],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 22:
this.$=new While($$[$0-4],$$[$0-1],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 23:
this.$=new Dowhile($$[$0-2],$$[$0-6],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 24: case 25:
this.$=new For($$[$0-8],$$[$0-6],$$[$0-4],$$[$0-1],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 26:
this.$=$$[$0-1]
break;
case 27:
this.$=$$[$0]
break;
case 28:
this.$= null
break;
case 29:
this.$= new Switch($$[$0-5],$$[$0-2],$$[$0-1],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 30:
this.$= new Switch($$[$0-4],$$[$0-1],undefined,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 31:
this.$= new Switch($$[$0-4],undefined,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 34:
this.$= new Case($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 35:
this.$= new Case(null,$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 36:
this.$=new Llamarfunc($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 37:
this.$=new Llamarfunc($$[$0-2],[],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 38:
 $$[$0-2].push($$[$0]);this.$ = $$[$0-2];
break;
case 39:
this.$ = [$$[$0]];
break;
case 40:
this.$= new Funcion($$[$0-8],$$[$0-1],$$[$0-6],null,_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 41:
this.$= new Funcion($$[$0-7],$$[$0-1],[],null,_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 42:
this.$= new Funcion($$[$0-8],$$[$0-1],$$[$0-6],$$[$0-3],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 43:
this.$= new Funcion($$[$0-7],$$[$0-1],[],$$[$0-3],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 44:
 $$[$0-3].push(new Declarar($$[$0-1],$$[$0],null,_$[$0-3].first_line,_$[$0-3].first_column)); this.$ =$$[$0-3] 
break;
case 45:
this.$ = [new Declarar($$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column)]
break;
case 46:
this.$= new Declarar($$[$0-3],$$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 47:
this.$=new Declarar($$[$0-1],$$[$0],null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 48:
this.$= new Declarar(tipo.NULL,$$[$0-2],$$[$0],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 49:
this.$=tipo.NUMERO;
break;
case 50:
this.$=tipo.DECIMAL;
break;
case 51:
this.$=tipo.STRING;
break;
case 52:
this.$=tipo.BOOLEAN;
break;
case 53:
this.$=tipo.CHAR;
break;
case 54:
this.$=new Print($$[$0-2],false,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 55:
this.$=new Print($$[$0-2],true,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 56:
this.$=new Bloque($$[$0],_$[$0].first_line,_$[$0].first_column)
break;
case 57:
this.$= new Incdec($$[$0-2],tipoA.INCREMENTO,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 58:
this.$= new Incdec($$[$0-2],tipoA.DECREMENTO,_$[$0-2].first_line,_$[$0-2].first_column)
break;
case 59:
this.$= new Aritmetica($$[$0],new Nativo("-1",tipoNat.NUMERO, _$[$0-1].first_line, _$[$0-1].first_column),tipoArit.MULTIPLICACION, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 60:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.SUMA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 61:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.RESTA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 62:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.DIVISION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 63:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.MULTIPLICACION, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 64:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.POTENCIA, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 65:
this.$= new Aritmetica($$[$0-2],$$[$0],tipoArit.MODULO, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 67:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.IGUALIGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 68:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.DIFERENTE, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 69:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.MAYOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 70:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 71:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.MENOR_IGUAL, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 72:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.MENOR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 73:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.AND, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 74:
this.$= new Relacional($$[$0-2],$$[$0],TipoRel.OR, _$[$0-2].first_line, _$[$0-2].first_column)
break;
case 75:
this.$= new Relacional(null,$$[$0],TipoRel.NOT, _$[$0-1].first_line, _$[$0-1].first_column)
break;
case 76:
this.$= $$[$0];
break;
case 77:
this.$ = $$[$0-1];
break;
case 78:
this.$ = $$[$0];
break;
case 79:
this.$= new Variable($$[$0],_$[$0].first_line, _$[$0].first_column);
break;
case 80:
this.$=new Nativo($$[$0],tipoNat.NUMERO, _$[$0].first_line, _$[$0].first_column)
break;
case 81:
this.$=new Nativo($$[$0],tipoNat.DECIMAL, _$[$0].first_line, _$[$0].first_column)
break;
case 82:
this.$=new Nativo($$[$0],tipoNat.STRING, _$[$0].first_line, _$[$0].first_column)
break;
case 83:
this.$=new Nativo($$[$0],tipoNat.BOOLEAN, _$[$0].first_line, _$[$0].first_column)
break;
case 84:
this.$=new Nativo($$[$0],tipoNat.CHAR, _$[$0].first_line, _$[$0].first_column)
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{1:[3]},{5:[1,44],6:45,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Vo,[2,3]),o($Vo,[2,4]),{9:[1,46]},o($Vo,[2,6]),o($Vo,[2,7]),o($Vp,$Vq,{9:[1,47]}),o($Vo,[2,9]),o($Vo,[2,10]),o($Vo,[2,11]),o($Vo,[2,12]),o($Vo,[2,13]),o($Vo,[2,14]),o($Vo,[2,15]),o($Vp,$Vr,{9:[1,48]}),{26:[1,49]},{26:[1,50]},{43:[1,51]},o($Vp,$Vs,{26:[1,53],49:$Vt}),{26:[1,54]},{26:[1,55]},{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{26:[1,70]},{26:[1,71]},{28:[1,72]},{9:[1,73]},{9:[1,74]},{9:[1,75],12:77,20:78,24:76,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VJ,[2,49]),o($VJ,[2,50]),o($VJ,[2,51]),o($VJ,[2,52]),o($VJ,[2,53]),{12:77,20:78,24:80,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:81,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:82,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VK,[2,78]),o($VK,[2,80]),o($VK,[2,81]),o($VK,[2,82]),o($VK,[2,83]),o($VK,[2,84]),{1:[2,1]},o($Vo,[2,2]),o($Vo,[2,5]),o($Vo,[2,8]),o($Vo,[2,16]),{12:77,20:78,24:83,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:84,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VL,[2,47],{49:[1,85]}),{12:77,20:78,24:86,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:91,26:$V4,27:[1,88],43:$VI,44:89,46:87,48:90,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:92,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:93,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:95,26:$V4,43:$VI,57:[1,94],58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:97,26:$V4,43:$VI,58:[1,96],71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:98,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:99,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:100,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:101,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:102,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:103,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:104,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:105,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:106,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:107,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:108,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:109,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:110,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{8:111,43:[1,112],48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:113,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Vo,[2,17]),o($Vo,[2,18]),o($Vo,[2,19]),{9:[1,115],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},o($VK,$Vq),o($VK,$Vr),o($VK,$Vs,{26:$VM}),o($VK,[2,59]),o($VN,[2,75],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),{27:[1,117],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{27:[1,118],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{27:[1,119],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{12:77,20:78,24:120,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VL,[2,48],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),{27:[1,121],45:[1,122]},o([9,57,58,59,60,61,62,63,64,65,66,67,68,69,70],$VO,{41:[1,123]}),{27:[1,124],45:[1,125]},{43:[1,126]},o($VP,[2,39],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),{27:[1,127],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{27:[1,128],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},o($VK,[2,57]),o($VQ,[2,60],{59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VK,[2,58],{72:38,12:77,20:78,24:80,26:$V4,43:$VI,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn}),o($VQ,[2,61],{59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VR,[2,62],{61:$Vy}),o($VR,[2,63],{61:$Vy}),o($VK,[2,64]),o($VR,[2,65],{61:$Vy}),o($VS,[2,67],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,65:$VC,66:$VD,67:$VE,68:$VF}),o($VS,[2,68],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,69],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VT,[2,70],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VT,[2,71],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VT,[2,72],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz}),o($VN,[2,73],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o([9,27,41,45,70],[2,74],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG}),{27:[1,129],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{9:[1,130]},{49:$Vt},{30:[1,131]},o($VU,[2,56],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,48:19,24:23,72:38,6:45,21:$V0,22:$V1,23:$V2,25:$V3,26:$V4,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn}),o($Vo,[2,20]),{12:77,20:78,24:91,26:$V4,27:[1,132],43:$VI,44:89,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VK,[2,77]),{9:[1,133]},{9:[1,134]},o($VL,[2,46],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),{41:[1,135]},{48:136,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve},{47:[1,137],48:138,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve},o($VK,[2,36]),{12:77,20:78,24:139,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($VP,[2,45]),{28:[1,140]},{28:[1,141]},{28:[1,142]},{12:77,20:78,24:143,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{32:[1,144]},o($VK,$VO),o($Vo,[2,54]),o($Vo,[2,55]),{47:[1,145],48:146,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve},{43:[1,147]},{28:[1,148]},{28:[1,149]},o($VP,[2,38],{57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:150,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:151,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{37:152,38:153,39:154,40:$VV,42:$VW},{9:[1,157],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{26:[1,158]},{28:[1,159]},{28:[1,160]},o($VP,[2,44]),{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:161,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:162,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{30:[1,163]},{30:[1,164]},{30:[1,166],38:165,39:167,40:$VV,42:$VW},{30:[1,168]},o($VU,[2,33]),{41:[1,169]},{12:77,20:78,24:170,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{8:171,12:172,20:78,24:23,26:$V4,43:[1,173],48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{12:77,20:78,24:174,26:$V4,43:$VI,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:175,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:176,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{30:[1,177]},{30:[1,178]},o($Vo,[2,28],{31:179,35:[1,180]}),o($Vo,[2,22]),{30:[1,181]},o($Vo,[2,30]),o($VU,[2,32]),o($Vo,[2,31]),{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:182,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{41:[1,183],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{27:[1,184]},o($Vp,$Vq,{27:[1,185]}),o($Vp,$Vs,{26:$VM,49:$Vt}),{27:[1,186],57:$Vu,58:$Vv,59:$Vw,60:$Vx,61:$Vy,62:$Vz,63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH},{30:[1,187]},{30:[1,188]},o($Vo,[2,41]),o($Vo,[2,43]),o($Vo,[2,21]),{10:190,25:$V3,28:[1,189]},o($Vo,[2,29]),{30:[2,35]},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:191,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{28:[1,192]},{28:[1,193]},{9:[1,194]},o($Vo,[2,40]),o($Vo,[2,42]),{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:195,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Vo,[2,27]),o($VU,[2,34]),{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:196,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},{4:114,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:$V0,22:$V1,23:$V2,24:23,25:$V3,26:$V4,29:197,32:$V5,33:$V6,34:$V7,36:$V8,43:$V9,48:19,50:$Va,51:$Vb,52:$Vc,53:$Vd,54:$Ve,55:$Vf,56:$Vg,58:$Vh,71:$Vi,72:38,73:$Vj,74:$Vk,75:$Vl,76:$Vm,77:$Vn},o($Vo,[2,23]),{30:[1,198]},{30:[1,199]},{30:[1,200]},o($Vo,[2,26]),o($Vo,[2,24]),o($Vo,[2,25])],
defaultActions: {44:[2,1],182:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

 const {Aritmetica,tipoArit} = require('./expresion/Aritmetica')
const {Relacional,TipoRel} = require('./expresion/relaciones')
const {tipo} = require('./expresion/retorno')
const {Incdec,tipoA} = require('./instrucciones/incdec')
const {Variable} = require('./expresion/variable')
const {Nativo,tipoNat} = require('./expresion/nativo')
 const {Declarar} = require('./instrucciones/declarar')
    const {Print} = require('./instrucciones/print')
    const {Bloque} = require('./instrucciones/bloque')
    const {If} = require('./instrucciones/If')
    const {While} = require('./instrucciones/While')
    const {Dowhile} = require('./instrucciones/Dowhile')
    const {Case} = require('./instrucciones/Case')
    const {Switch} = require('./instrucciones/Switch')
    const {For} = require('./instrucciones/For')
    const {Funcion} = require('./instrucciones/funcion')
    const {Llamarfunc} = require('./instrucciones/llamarfunc')
    const {Break} = require('./instrucciones/Break')
    const {Continue} = require('./instrucciones/Continue')
    const {Return} = require('./instrucciones/Return')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://espacios en blanco
break;
case 1://comentario simple	
break;
case 2://comentario multiple
break;
case 3:return 57;
break;
case 4:return 58;
break;
case 5:return 59;
break;
case 6:return 60;
break;
case 7:return 61;
break;
case 8:return 62;
break;
case 9:return 26;
break;
case 10:return 27;
break;
case 11:return 28;
break;
case 12:return 30;
break;
case 13:return 45;
break;
case 14:return 9;
break;
case 15:return 41;
break;
case 16:return 'masmas';
break;
case 17:return 'menosmenos';
break;
case 18:return 55;
break;
case 19:return 56;
break;
case 20:return 25;
break;
case 21:return 35;
break;
case 22:return 32;
break;
case 23:return 33;
break;
case 24:return 34;
break;
case 25:return 50;
break;
case 26:return 51;
break;
case 27:return 52;
break;
case 28:return 53;
break;
case 29:return 54;
break;
case 30:return 36;
break;
case 31:return 40;
break;
case 32:return 42;
break;
case 33:return 21;
break;
case 34:return 23;
break;
case 35:return 22;
break;
case 36:return 47;
break;
case 37:return 63;
break;
case 38:return 64;
break;
case 39:return 49;
break;
case 40:return 65;                     
break;
case 41:return 66;
break;
case 42:return 67;
break;
case 43:return 68;
break;
case 44:return 70;
break;
case 45:return 69;
break;
case 46:return 71;
break;
case 47:return 73;
break;
case 48:return 74;
break;
case 49:return 43;
break;
case 50:return 77;
break;
case 51:return 76;
break;
case 52: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 75; 
break;
case 53:return 5;
break;
case 54:console.log(yy_.yylloc.first_line, yy_.yylloc.first_columm, 'Lexico', yy_.yytext)
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\/)/i,/^(?:\*)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:;)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:for\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:void\b)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:[0-9]+\b)/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:'[^\']')/i,/^(?:(true|false)\b)/i,/^(?:"[^\"]*")/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}